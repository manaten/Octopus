研究の目的
近年のWebアプリケーションの台頭には凄まじい物があり、今後もいろいろなドメインのWebアプリケーションが登場していくことが予想される。Webアプリケーションの開発について焦点を当てると、通常のアプリケーション開発と違った難しさが幾つか挙げられる。今回はその内、サーバーと複数のクライアントの協調動作について考え、より効率的な開発を出来る環境を与えることを目指す。

主要な技術課題
Webアプリケーション開発においてサーバー・クライアントを扱う上でまず問題になるのが両者で使用する言語の違いである。現在も多くの環境においてクライアントはJavaScript、サーバーはJava、PHP、Rubyなどという場合が多い。次に、このように言語が異なることもありうる両者間におけるデータのやり取りである。当然、XML、JSONといった企画に統一して都度変換する必要があるが、このコードィングはアプリケーションにとって本質的でない。さらに、近年はアプリケーションの実行を通して通信を何度も行うリアルタイムなWebアプリケーションが増えてきている。多くのWebアプリケーションにおいて、この実装はhttpを用いたリクエストの繰り返し、高尚なフレームワークだとその上にRPCを実装したものになっている。RPCによるフレームワークは実装を容易にしているが、本研究では更に柔軟な実装を可能にする、複数クライアントにまたがるクロージャを含む全てのオブジェクトのやり取りを扱う。

提案する技術
以上を踏まえ、本研究では分散JavaScript言語という言語と、その処理系を提案する。この言語の処理系は、サーバーとクライアントにまたがって動作し、
RemoteObjectと呼ばれる特殊なオブジェクトのプロパティへ代入・参照をしたり、関数適応をしたりすることが通信を伴って動作する。
この機構により、プログラマはより直感的・簡潔にリアルタイムなWebプログラミングを行うことができる。
この言語の実装のために、JavaScriptによるRemoteObjectをサポートする通信ライブラリと、分散JavaScriptから通常のJavaScript＋通信ライブラリに変換するコンパイラを用意する。


予想される結果（課題をどの程度まで克服できるか）
特に難しいと考えているのが、他コンピュータへのクロージャの転送と、独自の分散JavaScriptをどれだけ通常のJavaScript上で再現できるかである。
これらは実行前のコード変換によって実現されるが、それにより多くのクロージャ呼び出しができてしまう。
これらのクロージャ呼び出しも、実行前のテクニックにより最小限に留めることがこの研究の課題である。


具体的な評価手法・実験方法・分析方法
評価は従来どおりに開発したWebアプリケーションや著名なフレームワークで開発したWebアプリケーションと、本システムで開発したWebアプリケーションの
動作速度やコードの簡潔さなどを比較することによって行う。
特に、前述のコード変換により、実行効率が落ちてしまうことは容易に予想できるが、どこまで素のJavaScriptに迫ることができるかが課題になってくる。


進捗状況
現在、サーバーサイドJavaScriptであるnode.jsとブラウザ上のJavaScript上において、WebSocketライブラリであるsocket.ioを用いたRemoteObjectライブラリの実装を行い、クロージャを除くオブジェクトのやり取りはある程度サポートされている状態である。クロージャの送受信をサポートした後、分散JavaScriptからのコード変換を実装するのが今後の課題である。
