//This file implements common code between client and server.

var Octopus = {};
try {
	Octopus = exports;
} catch(e){}

(function() {

	var isPrimitive = function(obj) {
		if(obj == null || obj == undefined)
			return true;
		if(obj.constructor ===  Boolean)
			return true;
		if(obj.constructor ===  String)
			return true;
		if(obj.constructor ===  Number)
			return true;
		return false;
	};
	var isFunction = function(obj) {
		if(obj.constructor ===  Function)
			return true;
		return false;
	};

	var inner = {};
	Octopus.__inner__ = inner;

	inner.set_cps = function(r, prop, value, callback) {
		if (r instanceof RemoteObject)
			r.set_cps(prop, value, callback);
		else
			callback(r[prop] = value);
	};
	inner.get_cps = function(r, prop, callback) {
		if (r instanceof RemoteObject)
			r.get_cps(prop, callback);
		else
			callback(r[prop]);
	};
	inner.invoke_cps = function(r, prop, args, k) {
		if (r instanceof RemoteObject)
			r.invoke_cps(prop, args, k);
		else
			r[prop].apply_cps(r, args, k);
	};
	inner.each_cps = function(r, callback, k) {
		if (r instanceof RemoteObject)
			r.each_cps(callback, k);
		else
		{
			var keys = [];
			for (key in r)
				keys.push(key);
			var continue_k = function() {
				key = keys.pop();
				callback(key, k, continue_k);
			};
			continue_k();
		}
	};

	inner.apply_cps = function(r, thisObj, args, callback) {
		if (r instanceof RemoteObject)
			r.apply_cps(thisObj, args, callback);
		else
		{
			if ( r.userDefined ) {
				args.push(callback);
				r.apply(thisObj, args);
			} else {
				// TODO if args are remote, to local copy and write back.
				var args_ = [];
				var k = function() {
					if (args.length == 0) {
						var result = r.apply(thisObj, args_);
						// TODO write back args.l
						callback(result);
					} else {
						var arg = args.shift();
						if (arg.constructor === RemoteObject || arg.constructor === RemoteFunction) {
							arg.clone(function(clone) {
								args_.push(clone);
								k();
							});
						} else {
							args_.push(arg);
							k();
						}
					}
				}
				k();
			}
		}
	};


	/**
	 * if
	 */
	inner.if_cps = function(condition, thenPart, elsePart, k) {
		if ( condition() )
			thenPart(k);
		else
			elsePart(k);
	};
	/**
	 * while(true)
	 */
	inner.loop_cps = function(loopBody, k) {
		var break_k = k;
		var continue_k = function() {
			loopBody(continue_k, break_k);
		};
		continue_k();
	};

	/**
	 * RemoteObjectManager exists per client or server.
	 * @param clientSocket
	 * @param octopusServer
	 * @returns
	 */
	var RemoteObjectManager = function(socket, exportRoot) {
		this.socket = socket;
		this.objectTable = {};
		this.exportId = 1;
		this.exportedObjects = [];
		this.exportedObjects[0] = exportRoot;
		var that = this;

		// operation of receive message.
		socket.on('octopus_send_message', function (data) {
			var returnResult = function(result) {
				socket.emit('octopus_return_'+data.objectId+'_'+data.invocationId, result);
			};

//			try {
				var reciever = that.exportedObjects[data.objectId];
				if (reciever === undefined)
					console.log(data);
				switch (data.type) {
				case 'call':
					var args = [];
					for (var i = 0; i < data.args.length; i++)
						args.push( that.getRemoteObject(data.args[i]) );
					inner.apply_cps(reciever, that.getRemoteObject(data.thisObj), args, function(result) { returnResult( that.exportObject(result) ); });
					break;
				case 'set':
					returnResult( that.exportObject(reciever[data.prop] = that.getRemoteObject(data.value)) );
					break;
				case 'get':
					returnResult( that.exportObject(reciever[data.prop]) );
					break;
				case 'invoke':
					break;
				case 'each':
					var keys = [];
					for (key in reciever)
						keys.push(key);
					returnResult(keys);
					break;
				case 'clone':
					returnResult(reciever);
					break;
				}
//			} catch(e) {
//				console.log("Error!");
//				console.log(e);
//				console.log(data);
//			};
		});
	};
	RemoteObjectManager.prototype.getRemoteObject = function(objData) {
		if (isPrimitive(objData))
			return objData;
		if (objData.isNative)
			return this.exportedObjects[objData.objectId];
		var objectId = objData.objectId;
		if (this.objectTable[objectId] !== undefined)
			return this.objectTable[objectId];
		return this.objectTable[objectId] = objData.isFunction ? new RemoteFunction(this, objectId) : new RemoteObject(this, objectId);
	};
	RemoteObjectManager.prototype.getObjectId = function(object) {
		var objectId;
		if (object.__octopus_object_id__ === undefined) {
			objectId = this.exportId++;
			this.exportedObjects[objectId] = object;
			object.__octopus_object_id__ = objectId;
		}
		else {
			objectId = object.__octopus_object_id__;
		}
		return objectId;
	};
	RemoteObjectManager.prototype.exportObject = function(object) {
		if (isPrimitive(object))
			return object;
		if (object.constructor === RemoteObject || object.constructor === RemoteFunction) {
			if (object.manager === this) {
				return {isNative:true, objectId:object.objectId};
			}
		}
		var objectId = this.getObjectId(object);
		return { isNative:false, objectId:object, isFunction:isFunction(object) };
	};

	inner.RemoteObjectManager = RemoteObjectManager;

	/**
	 * A constructor of RemoteObject.
	 * @param clientManager
	 * @param objectId
	 * @returns
	 */
	var RemoteObject = function(manager, objectId) {
		this.manager = manager;
		this.objectId = objectId;
		this.invocationId = 0;
	};
	RemoteObject.prototype.sendMessage = function(msgObj, k) {
		var manager = this.manager;
		var socket = manager.socket;
		var invocationId = this.invocationId++;
		msgObj.invocationId = invocationId;
		msgObj.objectId = this.objectId;
		socket.emit('octopus_send_message', msgObj);
		socket.on('octopus_return_'+this.objectId+'_'+invocationId, function(result) {
			if (k !== undefined) {
				k( manager.getRemoteObject(result) );
			}
		});
	};
	RemoteObject.prototype.get_cps = function(prop, k) {
		this.sendMessage({type:'get', prop:prop}, k);
	};
	RemoteObject.prototype.set_cps = function(prop, value, k) {
		this.sendMessage({type:'set', value:exportObject(value), prop:prop}, k);
	};
	RemoteObject.prototype.invoke_cps = function(prop, arg, k) {
		var args_ = [];
		for (var i = 0; i < args.length; i++) {
			args_.push( exportObject(args[i]) );
		}
		this.sendMessage({type:'invoke', prop:prop, arg:args_}, k);
	};
	RemoteObject.prototype.clone_cps = function(k) {
		var msgObj = {type:'clone'};
		var manager = this.manager;
		var socket = manager.socket;
		var invocationId = this.invocationId++;
		msgObj.invocationId = invocationId;
		msgObj.objectId = this.objectId;
		socket.emit('octopus_send_message', msgObj);
		socket.on('octopus_return_'+this.objectId+'_'+invocationId, function(result) {
			if (k !== undefined) {
				k( result );
			}
		});
	};
	RemoteObject.prototype.each_cps = function(callback, k) {
		var msgObj = {type:'each'};
		var manager = this.manager;
		var socket = manager.socket;
		var invocationId = this.invocationId++;
		msgObj.invocationId = invocationId;
		msgObj.objectId = this.objectId;
		socket.emit('octopus_send_message', msgObj);
		socket.on('octopus_return_'+this.objectId+'_'+invocationId, function(keys) {
			var continue_k = function() {
				if (keys.length == 0) {
					k();
				} else {
					key = keys.pop();
					callback(key, k, continue_k);
				}
			};
			continue_k();
		});
	};

	/**
	 * A constructor of RemoteFunction.
	 */
	var RemoteFunction = function(clientManager, objectId) {
		this.b = RemoteObject;
		this.b(clientManager, objectId);
		delete this.b;
	};
	RemoteFunction.prototype = new RemoteObject();
	RemoteFunction.prototype.apply_cps = function(thisObj, args, callback) {
		var args_ = [];
		for (var i = 0; i < args.length; i++) {
			args_.push( this.manager.exportObject(args[i]) );
		}
		this.sendMessage({type:'call', args:args, thisObj:this.manager.exportObject(thisObj) }, callback);
	};
})();
