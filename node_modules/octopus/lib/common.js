//This file implements common code between client and server.

var Octopus = {};
try {
	Octopus = exports;
} catch(e){}

(function() {

	var isPrimitive = function(obj) {
		if(obj == null || obj == undefined)
			return true;
		if(obj.constructor ===  Boolean)
			return true;
		if(obj.constructor ===  String)
			return true;
		if(obj.constructor ===  Number)
			return true;
		return false;
	};
	var isFunction = function(obj) {
		if(obj.constructor ===  Function)
			return true;
		return false;
	};

	Object.prototype.set_cps = function(prop, value, callback) {
		callback(this[prop] = value);
	};
	Object.prototype.get_cps = function(prop, callback) {
		callback(this[prop]);
	};
	Object.prototype.each_cps = function(callback, k) {
		var keys = [];
		for (key in this)
			keys.push(key);
		var continue_k = function() {
			key = keys.pop();
			callback(key, k, continue_k);
		};
		continue_k();
	};

	Function.prototype.call_cps = function(thisObj, args, callback) {
		if (this.userDefined) {
			this.apply(thisObj, args.push(callback));
		} else {
			// TODO if args are remote, to local copy and write back.
			callback(this.apply(thisObj, args));
		}
	};

	/**
	 * RemoteObjectManager exists per client or server.
	 * @param clientSocket
	 * @param octopusServer
	 * @returns
	 */
	Octopus.RemoteObjectManager = function(socket, exportRoot) {
		this.socket = socket;
		this.objectTable = {};

		var exportedObjects = [];
		exportedObjects[0] = exportRoot;
		var exportId = 1;

		// operation of receive message.
		socket.on('octopus_send_message', function (data) {
			var returnResult = function(result) {
				var returnMes = {id:data.id};

				//if result is not primitive, value is export to remoteObject
				if (isPrimitive(result)) {
					returnMes.isPrimitive = true;
					returnMes.value = result;
				}
				else {
					returnMes.isPrimitive = false;
					var objectId;
					if (result.__octopus_object_id__ === undefined) {
						objectId = exportId++;
						exportedObjects[objectId] = result;
						result.__octopus_object_id__ = objectId;
					}
					else {
						objectId = result.__octopus_object_id__;
					}
					returnMes.objectId = objectId;
					if (isFunction(result)) {
						returnMes.isFunction = true;
					}
				}
				//octopus_return_ + id
				socket.emit('octopus_return_'+data.objectId+'_'+data.invocationId, returnMes);
			};

			try {
				var reciever = exportedObjects[data.objectId];
				switch (data.type) {
				case 'call':
					reciever.call_cps(data.thisObj, data.args, returnResult);
					break;
				case 'set':
					returnResult(reciever[data.prop] = data.value);
					break;
				case 'get':
					returnResult(reciever[data.prop]);
					break;
				}
			} catch(e) {
				console.log("Error!");
				console.log(data);
			};
		});
	};
	Octopus.RemoteObjectManager.prototype.getRemoteObject = function(remObjData) {
		var objectId = remObjData.objectId;
		if (this.objectTable[objectId] !== undefined)
			return this.objectTable[objectId];
		return this.objectTable[objectId] = remObjData.isFunction ? new RemoteFunction(this, objectId) : new RemoteObject(this, objectId);
	};

	/**
	 * A constructor of RemoteObject.
	 * @param clientManager
	 * @param objectId
	 * @returns
	 */
	var RemoteObject = function(manager, objectId) {
		this.manager = manager;
		this.objectId = objectId;
		this.invocationId = 0;
	};
	RemoteObject.prototype.sendMessage = function(msgObj, k) {
		var manager = this.manager;
		var socket = manager.socket;
		var invocationId = this.invocationId++;
		msgObj.invocationId = invocationId;
		msgObj.objectId = this.objectId;
		socket.emit('octopus_send_message', msgObj);
		socket.on('octopus_return_'+this.objectId+'_'+invocationId, function(remObjData) {
			if (k)
				k( remObjData.isPrimitive ? remObjData.value : manager.getRemoteObject(remObjData) );
		});
	};
	RemoteObject.prototype.get_cps = function(prop, k) {
		this.sendMessage({type:'get', prop:prop}, k);
	};
	RemoteObject.prototype.set_cps = function(prop, value, k) {
		this.sendMessage({type:'set', value:value, prop:prop}, k);
	};
//	RemoteObject.prototype.clone = function(callback) {
//		//TODO
//	};
	RemoteObject.prototype.each_cps = function(callback, k) {
		var keys = [];
		for (key in this)
			keys.push(key);
		var continue_k = function() {
			key = keys.pop();
			callback(key, k, continue_k);
		};
		continue_k();
	};

	/**
	 * A constructor of RemoteFunction.
	 */
	var RemoteFunction = function(clientManager, objectId) {
		this.b = RemoteObject;
		this.b(clientManager, objectId);
		delete this.b;
		//TODO
	};
	RemoteFunction.prototype = new RemoteObject();
//	TODO
	RemoteFunction.prototype.call_cps = function(thisObj, args, callback) {
		this.sendMessage({type:'call', args:args, thisObj:thisObj }, callback);
	};

////	TODO
//	var createEnvironment = function(env) {
//		if (env) {
//			var envProto = {};
//			envProto.prototype = env;
//			return new envProto();
//		}
//		return {};
//	};
})();
