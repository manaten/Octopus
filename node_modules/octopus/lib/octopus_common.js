//This file implements common code between client and server.

var Octopus = { isServer:false };
try {
	Octopus = exports;
	Octopus.isServer = true;
} catch(e){}

(function() {
	var DEBUG_LOG_LEVEL = 0;

	var isPrimitive = function(obj) {
		if(obj == null || obj == undefined)
			return true;
		if(obj.constructor ===  Boolean)
			return true;
		if(obj.constructor ===  String)
			return true;
		if(obj.constructor ===  Number)
			return true;
		return false;
	};
	var isFunction = function(obj) {
		if(obj.constructor ===  Function)
			return true;
		return false;
	};
	var log = function(title, cont) {
		if (!DEBUG_LOG_LEVEL)
			return;
		try {
			if (Octopus.isServer)
				console.log( "   \x1b[36m" + title + " - \x1b[39m", cont);
			else
				console.log( "   " + title + " - ", cont);
		} catch(e) {
			cont_ = '{';
			for (key in cont) {
				if (!cont.constructor.prototype[key])
					cont_ += ' ' + key + ': ' + cont[key] + ', '
			}
			cont_ += '}';
			if (Octopus.isServer)
				console.log( "   \x1b[36m" + title + " - \x1b[39m" + cont_);
			else
				console.log( "   " + title + " - " + cont_);
		}
	};

	var inner = {};
	Octopus.__inner__ = inner;

	inner.set_cps = function(r, prop, value, callback) {
		if (r instanceof RemoteObject)
			r.set_cps(prop, value, callback);
		else
			callback(r[prop] = value);
	};
	inner.get_cps = function(r, prop, callback) {
		if (r instanceof RemoteObject)
			r.get_cps(prop, callback);
		else
			callback(r[prop]);
	};
	inner.each_cps = function(r, callback, k) {
		if (r instanceof RemoteObject)
			r.each_cps(callback, k);
		else
		{
			var keys = [];
			for (key in r) {
				if (key !== '__octopus_object_id__')
					keys.push(key);
			}
			var continue_k = function() {
				if (keys.length === 0) {
					k();
				} else {
					key = keys.pop();
					callback(key, k, continue_k);
				}
			};
			continue_k();
		}
	};

	inner.apply_cps = function(r, thisObj, args, callback) {
		if (r.constructor === RemoteObject)
			r.apply_cps(thisObj, args, callback);
		else
		{
			if ( r.isUserDefined ) {
				args.push(callback);
				r.apply(thisObj, args);
			} else {
				// TODO if args are remote, to local copy and write back.
				var args_ = [];
				var k = function() {
					if (args.length == 0) {
						var result = r.apply(thisObj, args_);
						// TODO write back args.
						callback(result);
					} else {
						var arg = args.shift();
						if (arg && arg.constructor === RemoteObject) {
							arg.clone_cps(function(clone) {
								args_.push(clone);
								k();
							});
						} else {
							args_.push(arg);
							k();
						}
					}
				}
				k();
			}
		}
	};


	/**
	 * if
	 */
	inner.if_cps = function(condition, thenPart, elsePart, k) {
		if ( condition() )
			thenPart(k);
		else
			elsePart(k);
	};
	/**
	 * while(true)
	 */
	inner.loop_cps = function(loopBody, k) {
		var continue_k = function() {
			loopBody(k, continue_k);
		};
		continue_k();
	};

	exportedObjects = {};
	exportId = 1;
	/**
	 * RemoteObjectManager exists per client or server.
	 * @param clientSocket
	 * @param octopusServer
	 * @returns
	 */
	var RemoteObjectManager = function(socket, exportRoot) {
		this.socket = socket;
		this.objectTable = {};
		exportedObjects[0] = exportRoot;
		exportRoot.__octopus_object_id__ = 0;
		var that = this;

		// operation of receive message.
		socket.on('octopus_send_message', function (data) {
			that.receiveMessage(data);
		});
	};
	RemoteObjectManager.prototype.receiveMessage = function(data) {
		var socket = this.socket;
		var that = this;
		var returnResult = function(result) {
			log("return to other", result);
			socket.emit('octopus_return_'+data.objectId+'_'+data.invocationId, result);
		};
		var reciever = exportedObjects[data.objectId];
		log("Recieve message :" + data.type, data);
		log("  reciever:", reciever);
		switch (data.type) {
		case 'call':
			var args = [];
			for (var i = 0; i < data.args.length; i++)
				args.push( this.getRemoteObject(data.args[i]) );
			var thisObj = this.getRemoteObject(data.thisObj);
			inner.apply_cps(reciever, thisObj, args, function(result) { returnResult( that.exportObject(result) ); } );
			break;
		case 'set':
			var value = this.getRemoteObject(data.value);
			inner.set_cps(reciever, data.prop, value, function(result) { returnResult( that.exportObject(result) ); } );
			break;
		case 'get':
			inner.get_cps(reciever, data.prop, function(result) { returnResult( that.exportObject(result) ); } );
			break;
		case 'each':
			var keys = [];
			for (key in reciever) {
				if (key !== '__octopus_object_id__')
					keys.push(key);
			}
			returnResult(keys);
			break;
		case 'clone':
			returnResult(reciever);
			break;
		}
	};

	RemoteObjectManager.prototype.getRemoteObject = function(objData) {
		log("getRemoteObject", objData);
		if (isPrimitive(objData))
			return objData;
		//TODO 自身のObjectを他PCのRemoteObject経由で参照する自体は防ぐ
		if (objData.isNative === true)
			return exportedObjects[objData.objectId];
		var objectId = objData.objectId;
		if (this.objectTable[objectId] !== undefined)
			return this.objectTable[objectId];
		return this.objectTable[objectId] = new RemoteObject(this, objectId);
	};
	// NativeObject -> remoteObjectId (with registering export table)
	RemoteObjectManager.prototype.getObjectId = function(object) {
		var objectId;
		if (object.__octopus_object_id__ === undefined) {
			objectId = exportId++;
			exportedObjects[objectId] = object;
			object.__octopus_object_id__ = objectId;
		}
		else {
			objectId = object.__octopus_object_id__;
		}
		log("getObjectId", objectId);
		return objectId;
	};
	// NativeObject -> ReturnMessage
	RemoteObjectManager.prototype.exportObject = function(object) {
		//log("export object", object);
		if (isPrimitive(object))
			return object;
		if (object.constructor === RemoteObject) {
			if (object.manager === this) {
				return { isNative:true, objectId:object.objectId };
			}
		}
		var objectId = this.getObjectId(object);
		return { isNative:false, objectId:objectId };
	};

	inner.RemoteObjectManager = RemoteObjectManager;

	/**
	 * A constructor of RemoteObject.
	 * @param clientManager
	 * @param objectId
	 * @returns
	 */
	var RemoteObject = function(manager, objectId) {
		this.manager = manager;
		this.objectId = objectId;
		this.invocationId = 0;
	};
	RemoteObject.prototype.sendMessage = function(msgObj, k) {
		var manager = this.manager;
		var socket = manager.socket;
		var invocationId = this.invocationId++;
		msgObj.invocationId = invocationId;
		msgObj.objectId = this.objectId;
		log("sendMessage", msgObj);
		socket.emit('octopus_send_message', msgObj);
		socket.on('octopus_return_'+this.objectId+'_'+invocationId, k);
	};
	RemoteObject.prototype.get_cps = function(prop, k) {
		var manager = this.manager;
		this.sendMessage({type:'get', prop:prop}, function(result) {
			if (k !== undefined) {
				k( manager.getRemoteObject(result) );
			}
		});
	};
	RemoteObject.prototype.set_cps = function(prop, value, k) {
		var manager = this.manager;
		this.sendMessage({type:'set', value:this.manager.exportObject(value), prop:prop}, function(result) {
			if (k !== undefined) {
				k( manager.getRemoteObject(result) );
			}
		});
	};

	RemoteObject.prototype.clone_cps = function(k) {
		this.sendMessage({type:'clone'}, function(result) {
			if (k !== undefined) {
				k( result );
			}
		});
	};
	RemoteObject.prototype.each_cps = function(callback, k) {
		this.sendMessage({type:'each'}, function(keys) {
			var continue_k = function() {
				if (keys.length == 0) {
					k();
				} else {
					key = keys.pop();
					callback(key, k, continue_k);
				}
			};
			continue_k();
		});
	};
	RemoteObject.prototype.apply_cps = function(thisObj, args, k) {
		var manager = this.manager;
		var args_ = [];
		for (var i = 0; i < args.length; i++) {
			args_.push( this.manager.exportObject(args[i]) );
		}
		this.sendMessage({type:'call', args:args_, thisObj:this.manager.exportObject(thisObj) }, function(result) {
			if (k !== undefined) {
				k( manager.getRemoteObject(result) );
			}
		});
	};
})();
