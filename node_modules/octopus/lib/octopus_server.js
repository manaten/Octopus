/**
 *
 */
var io = require('socket.io'),
fs = require('fs'),
sys = require('sys'),
http = require('http'),
url = require('url');

var common = require(__dirname + "/octopus_common.js");

for (var key in common) {
	exports[key] = common[key];
}
var octServer;
exports.__inner__.init = function(exports, desc) {
	octServer = new OctopusServer(exports, desc);
};
exports.on = function(eventName, handler) {
	if (!octServer.handlers[eventName])
		octServer.handlers[eventName] = [];
	octServer.handlers[eventName].push(handler);
};
exports.getClients = function() {
	return octServer.clients;
}
/**
 * OctopusServer is a
 * @param server
 * @param clientCode
 * @returns
 */
var OctopusServer = function(exports, desc) {
	this.handlers = {};
	this.clients = [];
	this.exports = exports;

	var staticFiles = {};
	for (var i = 0; i < desc.staticFiles.length; i++) {
		staticFiles["/" + desc.staticFiles[i]] = desc.staticFiles[i];
	}
	var server = http.createServer(function(req, res) {
		var path = url.parse(req.url).pathname;
		if (path == "/octopus/octopus.js") {
			res.writeHead(200, {'Content-Type': 'application/javascript'});
			var codeStream = fs.createReadStream(__dirname + '/octopus_common.js');
			codeStream.pipe(res, { end: false });
			codeStream.on("end", function() {
				codeStream = fs.createReadStream(__dirname + '/octopus_client.js');
				codeStream.pipe(res, { end: false });
				codeStream.on("end", function() {
					fs.createReadStream(desc.outputDir + "/client.js").pipe(res);
				});
			});
		} else if(staticFiles[path]) {
			res.writeHead(200, {'Content-Type': getContentType(staticFiles[path])});
			var rs = fs.createReadStream(desc.basePath + '/' + staticFiles[path]);
			sys.pump(rs, res);
		} else {
			res.writeHead(200, {'Content-Type': 'text/html'});
			var rs = fs.createReadStream(desc.basePath + '/' + desc.startHtml);
			sys.pump(rs, res);
		}
	});
	server.listen(desc.port);

	var that = this;
	this.io = io.listen(server);
	this.io.set( "log level", 1 );

	// On client connected.
	this.io.sockets.on('connection', function (clientSocket) {
		var manager = new common.__inner__.RemoteObjectManager(clientSocket, that.exports);

		var client = manager.getRemoteObject({objectId:0, isNative:false});
		that.clients.push(client);
		// if client disconnect, remove from list. TODO remoteObject GCing.
		clientSocket.on('disconnect', function() {
			that.clients.remove(client);
		});

		if (that.handlers['connection']) {
			for (var i = 0; i < that.handlers['connection'].length; i++)
				that.handlers['connection'][i].call(null, client);
		}
	});

	sys.log('Server running at http://127.0.0.1:' + desc.port + '/');
};

Array.prototype.remove = function(element) {
	for (var i = 0; i < this.length; i++) {
		if (this[i] === element) {
			this.splice(i, 1);
			break;
		}
	}
};

var getContentType = function(fileName)
{
	var exts = fileName.split(".");
	var ext = exts[exts.length - 1];
	if (ext == "html" || ext == "htm")
		return "text/html";
	if (ext == "js")
		return "application/javascript";
	if (ext == "jpg")
		return "image/jpeg";
	if (ext == "gif")
		return "image/gif";
	if (ext == "png")
		return "image/png";
	return "";
};
