/**
 *
 */
var io = require('socket.io'),
fs = require('fs'),
sys = require('sys'),
http = require('http'),
url = require('url');

var Octopus = require(__dirname + "/common.js");

for (var key in Octopus) {
	exports[key] = Octopus[key];
}

exports.create = function(clientCode, clientHtml, port) {
	var server = http.createServer(function(req, res) {
		var path = url.parse(req.url).pathname;
		res.writeHead(200, {'Content-Type': 'text/html'});
		var rs = fs.createReadStream(clientHtml);
		sys.pump(rs, res);
	});
	server.listen(port);
	return new OctopusServer(server, clientCode);
};
/**
 * OctopusServer is a
 * @param server
 * @param clientCode
 * @returns
 */
var OctopusServer = function(server, clientCode) {
	var that = this;
	this.server = server;
	this.handlers = {};
	this.clients = [];
	this.exports = {};

	var oldListeners = server.listeners('request');
	server.removeAllListeners('request');

	server.on('request', function(req, res) {
		var path = url.parse(req.url).pathname;

		if (path == "/octopus/octopus.js") {
			res.writeHead(200, {'Content-Type': 'application/javascript'});
			var codeStream = fs.createReadStream(__dirname + '/common.js');
			codeStream.pipe(res, { end: false });
			codeStream.on("end", function() {
				codeStream = fs.createReadStream(__dirname + '/client.js');
				codeStream.pipe(res, { end: false });
				codeStream.on("end", function() {
					fs.createReadStream(clientCode).pipe(res);
				});
			});
		} else {
			for (var i = 0; i < oldListeners.length; i++)
				oldListeners[i].call(server, req, res);
		}
	});

	this.io = io.listen(server);
	// On client connected.
	this.io.sockets.on('connection', function (clientSocket) {
		if (!that.handlers['connection'])
			return;
		var manager = new Octopus.__inner__.RemoteObjectManager(clientSocket, that.exports);
		var client = manager.getRemoteObject(0);
		that.clients.push(client);
		for (var i = 0; i < that.handlers['connection'].length; i++)
			that.handlers['connection'][i].call(null, client);
	});
};
OctopusServer.prototype.on = function(eventName, handler) {
	if (!this.handlers[eventName])
		this.handlers[eventName] = [];
	this.handlers[eventName].push(handler);
};
OctopusServer.prototype.setExports = function(exports) {
	this.exports = exports;
};

